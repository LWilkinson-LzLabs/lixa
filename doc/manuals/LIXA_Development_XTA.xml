<chapter xml:id="Development_XTA"
	 xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Developing Application Programs using XTA (XA Transaction API) interface</title>
  <para>
    This chapter explains what XTA is and how you can develop applications
    that use XTA interface.
  </para>
  <section>
    <title>XTA Introduction</title>
    <para>
      This section introduces some basic concepts for a better comprehension of
      XTA topic.
    </para>
    <section>
      <title>Why XTA?</title>
      <para>
	The TX Transaction Demarcation Specification
	<citation>TXspec</citation>, published in 1995 by
	X/Open is a programming interface that has been designed for:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    C and COBOL programming languages
	  </para></listitem>
	  <listitem><para>
	    single thread applications
	  </para></listitem>
	  <listitem><para>
	    applications executed under the control of TP Monitors
	  </para></listitem>
	  <listitem><para>
	    implicit (static) transactional context
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	The DTP Reference Model Version 3
	<citation>RefModel</citation>, published in 1996 by X/Open is a
	programming model that has been designed for:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    applications executed under the control of TP Monitors
	  </para></listitem>
	  <listitem><para>
	    TP Monitors with integrated Transaction Managers
	  </para></listitem>
	  <listitem><para>
	    tight coupling between couples of Transaction Managers to propagate
	    transactional contexts and to coordinated distributed transactions
	    among different systems
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	All the above assumptions are no more up-to-date in the cloud native
	programming models like CaaS (Container as a Service), 
	PaaS (Platform as a Service) and FaaS (Function as a Service).
      </para>
      <para>
	XTA aims to provide TXaaS (Transaction as a Service) backend services
	that can be used by cloud native applications that, for one reason or
	another, require two phase commit ACID transactions among distributed
	applications
	<footnote><para>
	  Many authors consider two phase commit the root of every evil in
	  the realm of massively distributed applications, but the author of
	  XTA thinks that some specific use cases can take advantage from 
	  two phase commit transactionality
	</para></footnote>.
      </para>
    </section>
    <section>
      <title>XTA Architecture</title>
      <para>
	<figure xml:id="xta_arch01">
	  <title>Software stack of an XTA application</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_01.svg"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	The above picture explains the software stack architecture for an XTA
	application: the <emphasis>Application Program</emphasis> interacts
	with XA <emphasis>Resource Managers</emphasis>, like PostgreSQL and
	MySQL, and with <emphasis>XTA</emphasis>.
	<emphasis>XTA</emphasis> wraps <emphasis>LIXA</emphasis> libraries that
	interact with the <emphasis>Resource Managers</emphasis> and implement
	the client side part of the transaction management logic.
      </para>
      <para>
	<figure xml:id="xta_arch02">
	  <title>Single application layout</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_02.svg"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	The simplest deployment of an XTA application consists of a single
	<emphasis>Application Program</emphasis> that uses one or more
	<emphasis>Resource Managers</emphasis> in a distributed transaction.
	<emphasis>XTA</emphasis> connects to <emphasis>LIXA state server
	(<command>lixad</command>)</emphasis> to coordinate the XA two phase
	commit protocol.
	<emphasis>Application Program</emphasis>,
	<emphasis>Resource Managers</emphasis> and
	<emphasis>LIXA state server</emphasis> don't have to reside in the
	same system: they can be distributed in different systems that
	communicate by mean of the TCP/IP protocol.
      </para>
      <para>
	<figure xml:id="xta_arch03">
	  <title>Multiple applications layout</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_03.svg"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	XTA allows deployment of multiple
	<emphasis>Application Programs</emphasis> that use one or more
	<emphasis>Resource Managers</emphasis> in a distributed transaction.
	<emphasis>XTA</emphasis> connects to <emphasis>LIXA state server
	(<command>lixad</command>)</emphasis> to coordinate the XA two phase
	commit protocol.
	<emphasis>Application Programs</emphasis>,
	<emphasis>Resource Managers</emphasis> and
	<emphasis>LIXA state server</emphasis> don't have to reside in the
	same system: they can be distributed in different systems that
	communicate by mean of the TCP/IP protocol.
      </para>
      <note>
	<para>
	  <emphasis>XTA</emphasis>, in comparison with the standard TX
	  interface, implements the logic necessary to distribute a
	  global transaction between two or more
	  <emphasis>Application Programs</emphasis> but it does not provide
	  the communication protocol between them. Using the above picture as
	  an example, it's in charge of
	  <emphasis>Application Program 1</emphasis> to exchange information
	  with <emphasis>Application Program 2</emphasis>: any synchronous or
	  asynchronous protocol can be used.
	</para>
	<para>
	  Anyway, two constraints can't be violated:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
	      all the <emphasis>Application Programs</emphasis> that
	      participate in the same global transaction, must connect to the
	      same <emphasis>LIXA state server</emphasis>
	    </para></listitem>
	    <listitem><para>
	      the <emphasis>Application Programs</emphasis> must call XTA
	      functions in the proper order to partipate in the same global
	      transaction
	    </para></listitem>
	  </itemizedlist>
	</para>
	<para>
	  XTA does not constraint many other aspects:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
	      <emphasis>Application Programs</emphasis> don't have to be
	      developed using the same programming language
	    </para></listitem>
	    <listitem><para>
	      <emphasis>Application Programs</emphasis> don't have to be
	      executed inside the same sort of <emphasis>application
	      container or server</emphasis>; example: one
	      <emphasis>Application Program</emphasis> can be executed inside
	      a shell script, another one can be executed under the supervision
	      of an HTTP server
	    </para></listitem>
	    <listitem><para>
	      <emphasis>Application Programs</emphasis> can use any sort of
	      communication channel to transfer the transaction identifier 
	      (XID): it can be a REST over HTTP, it can be a message queing
	      system, it can be a POSIX pipe and so on. Any communication
	      channel that can send an ASCII string is eligible for passing
	      the transaction identifier (XID)
	    </para></listitem>
	    <listitem><para>
	      <emphasis>Application Programs</emphasis> can be called using
	      consecutive calls or can run in concurrent branches
	    </para></listitem>
	  </itemizedlist>
	</para>
      </note>
    </section>
    <section>
      <title>XTA Technology Matrix</title>
      <para>
	XTA strongly depends from the type of XA support provided by the
	different Resource Managers and from the language bindings supplied
	with the Resource Managers' libraries. The following table is updated
	with the tested configurations:
	<footnote><para>
	  Sometimes software versions make the difference, but this table don't
	  cope with them and must not be intended like a compatibility and
	  support matrix.
	</para></footnote>
	<table xml:id="XTA_technology_matrix" frame="all">
	  <title>Resouce Managers and Programming Languages for XTA</title>
	  <tgroup cols="6" colsep="1" rowsep="1">
	    <thead>
	      <row>
		<entry>Resource Manager</entry>
		<entry>C</entry>
		<entry>C++<footnote>
		<para>Planned a C++ wrapper, not yet implemented
		</para></footnote></entry>
		<entry>Java<footnote>
		<para>Planned a JNI based wrapper with access to XA native
		Java classes, not yet implemented
		</para></footnote></entry>
		<entry>PHP<footnote>
		<para>Planned a SWIG wrapper, not yet implemented
		</para></footnote></entry>
		<entry>Python<footnote>
		<para>Planned a SWIG wrapper, not yet implemented
		</para></footnote></entry>
	      </row>
	    </thead>
	    <tbody align="center">
	      <row>
		<entry>MySQL, MariaDB</entry>
		<entry>Y<footnote>
		<para><quote>Multiple Applications, Consecutive Calls</quote>
		pattern is not
		available because MySQL/MariaDB don't support TMSUSPEND and
		TMRESUME standard XA flags
		</para></footnote></entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>-</entry>
	      </row>
	      <row>
		<entry>Oracle DBMS</entry>
		<entry>Y</entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>N<footnote>
		<para>No known way to re-use a standard OCI connection as an 
		XA OCI connection
		</para></footnote></entry>
		<entry>N<footnote>
		<para>No known way to re-use a standard OCI connection as an 
		XA OCI connection
		</para></footnote></entry>
	      </row>
	      <row>
		<entry>PostgreSQL</entry>
		<entry>Y<footnote>
		<para><quote>Multiple Applications, Consecutive Calls</quote>
		pattern is not
		available because MySQL/MariaDB don't support TMSUSPEND and
		TMRESUME standard XA flags
		</para></footnote></entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>-</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
    </section>
    <section>
      <title>The XTA Programming Model</title>
      <para>
	XTA support 4 different patterns:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    <quote>Single Application</quote>:
	    single <emphasis>Application Program</emphasis> with single or 
	    multiple <emphasis>Resource Managers</emphasis> as supported by
	    the TX Transaction Demarcation Specification
	  </para></listitem>
	  <listitem><para>
	    <quote>Multiple Applications, Consecutive Calls</quote>:
	    multiple <emphasis>Application Programs</emphasis> with single or
	    multiple <emphasis>Resource Managers</emphasis>, only one
	    <emphasis>Application Program</emphasis> is working as part of a
	    transaction at a specified time, the XA global transaction is
	    composed by a single transaction branch
	  </para></listitem>
	  <listitem><para>
	    <quote>Multiple Applications, Concurrent Branches/Pseudo
	    Synchronous</quote>:
	    multiple <emphasis>Application Programs</emphasis> with single or
	    multiple <emphasis>Resource Managers</emphasis>, many 
	    <emphasis>Application Programs</emphasis> are concurrently working
	    as part of a transaction at a specified time, the XA global
	    transaction is composed by multiple transaction branches, the
	    type of interaction among the
	    <emphasis>Application Programs</emphasis> is
	    <quote>Pseudo Synchronous</quote>
	  </para></listitem>
	  <listitem><para>
	    <quote>Multiple Applications, Concurrent Branches/Pseudo
	    Asynchronous</quote>:
	    multiple <emphasis>Application Programs</emphasis> with single or
	    multiple <emphasis>Resource Managers</emphasis>, many 
	    <emphasis>Application Programs</emphasis> are concurrently working
	    as part of a transaction at a specified time, the XA global
	    transaction is composed by multiple transaction branches, the
	    type of interaction among the
	    <emphasis>Application Programs</emphasis> is
	    <quote>Pseudo Asynchronous</quote>
	  </para></listitem>
	</itemizedlist>
      </para>
    </section>
    <section>
      <title>XTA Resources and XA Resource Managers</title>
      <important><para>
	This section refers to concepts that are linked with deep technical
	details of the <citation>XAspec</citation>: they are not trivial and
	sometimes they could even sound strange due to the epoch of XA
	standard design. XTA tries to provide an easy and modern interface for
	working with XA, but some caveats still remain at least for these
	reasons:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    XA was designed as a protocol between one 
	    <emphasis>Transaction Manager</emphasis> and one or more
	    <emphasis>Resource Managers</emphasis>; the designers probably
	    didn't imagine the usage of XA inside something like XTA
	  </para></listitem>
	  <listitem><para>
	    XA standard predated the free software and open source initiatives
	    and the design had to cope with commercial closed source softwares.
	    Furthermore, XA didn't introduce changes in the proprietary 
	    protocols between
	    <emphasis>Application Programs</emphasis> and 
	    <emphasis>Resource Managers</emphasis>, but <quote>sidecar</quote>
	    approach was choosen.
	  </para></listitem>
	</itemizedlist>
      </para></important>
      <section>
	<title>XA Design Considerations</title>
	<para>
	  <citation>XAspec</citation> defines the interface that must be
	  implemented by an <quote>XA standard compliant</quote>
	  <emphasis>Resource Manager</emphasis>: it's described in file
	  <link xlink:href="https://github.com/tiian/lixa/blob/master/src/common/xa.h">xa.h</link> by struct <function>xa_switch_t</function>.
	  One tricky point is a consequence of <function>xa_open()</function>
	  and <function>xa_close()</function> functions: they must be called to
	  <quote>open</quote> and <quote>close</quote> the 
	  <emphasis>Resource Manager</emphasis>. 
	</para>
	<para>
	  Non XA applications use native functions to open and close the
	  connections with the resource managers.
	</para>
	<para>
	  <emphasis>Application Programs</emphasis> that run in a XA context,
	  must retrieve the connections with the 
	  <emphasis>Resource Managers</emphasis> previously opened by the
	  <emphasis>Transaction Manager</emphasis>.	
	</para>
	<para>
	  During LIXA development, 3 different type of
	  <emphasis>Resource Managers</emphasis> have been discovered:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
	      XA standard compliant <emphasis>Resource Managers</emphasis> that
	      implement <function>xa_switch_t</function> interface and use the
	      exact same functions to open a new connection and to retrieve a
	      connection previously opened by the
	      <emphasis>Transaction Manager</emphasis>: IBM DB2 and IBM MQ
	      (previously MQSeries and WebSphere MQ) belong to this category
	      <footnote><para>IBM, DB2, MQ, MQSeries and WebSphere are
	      trademarks of <trademark>IBM</trademark></para></footnote>
	    </para></listitem>
	    <listitem><para>
	      XA standard compliant <emphasis>Resource Managers</emphasis> that
	      implement <function>xa_switch_t</function> interface and use
	      different functions to open a new connection and to retrieve a
	      connection previously opened by the
	      <emphasis>Transaction Manager</emphasis>: Oracle Database Server
	      belongs to this category
	      <footnote><para>Oracle is a trademark of
	      <trademark>Oracle Corporation</trademark></para></footnote>
	    </para></listitem>
	    <listitem><para>
	      Non XA standard compliant <emphasis>Resource Managers</emphasis>
	      that don't implement <function>xa_switch_t</function> interface
	      and provide some XA equivalent functions by mean of special
	      commands: MySQL<footnote><para>MySQL is a trademark of
	      <trademark>Oracle Corporation</trademark></para></footnote>,
	      MariaDB and PostgreSQL belong to this category
	    </para></listitem>
	  </itemizedlist>
	</para>
	<para>
	  The second type of <emphasis>Resource Managers</emphasis> is the
	  most difficult to integrate from XTA perspective: next paragraphs
	  explain why.
	</para>
      </section>
      <section>
	<title>XTA Resource Hierarchy</title>
	<para>
	  To cope with the different implementations of XA 
	  <emphasis>Resource Managers</emphasis>, XTA introduces a specific
	  hierarchy for resources as depicted in the below image:
	  <figure xml:id="xta_arch05">
	  <title>XTA Resource Hierarchy</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_05.svg"/>
	    </imageobject>
	  </mediaobject>
	  </figure>
	</para>
	<para>
	  <emphasis>XAResource</emphasis> is an abstract class that can't be
	  used to map a real <emphasis>Resource Manager</emphasis>, but
	  useful to pass an object reference.
	</para>
	<para>
	  <emphasis>NativeXAResource</emphasis> is the concrete class that
	  must be used for all the <emphasis>Resource Managers</emphasis>
	  that provide XA standard interface.
	</para>
	<para>
	  <emphasis>AcquiredXAResource</emphasis> is a partially abstract
	  class with basically no practical use (only conceptual).
	</para>
	<para>
	  <emphasis>MySQLXAResource</emphasis> is the concrete class that 
	  must be used for MySQL and MariaDB
	  <emphasis>Resource Managers</emphasis>: it implements a specific
	  constructor that accepts a MYSQL type connection.
	</para>
	<para>
	  <emphasis>PostgreSQLXAResource</emphasis> is the concrete class that 
	  must be used for PostgreSQL <emphasis>Resource Manager</emphasis>:
	  it implements a specific constructor that accepts a PGconn type
	  connection.
	</para>
	<para>
	  Further non XA standard <emphasis>Resource Managers</emphasis> will
	  require specialized <emphasis>somethingXAResource</emphasis>.
	</para>
      </section>
      <section>
	<title>XTA Resource Usage</title>
	<para>
	  Due to the above explanation, the usage of the different XTA
	  resource types present some differences:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
	      <emphasis>NativeXAResource</emphasis> can be statically defined
	      inside <filename>lixac_conf.xml</filename> or can be dynamically
	      defined at run time using the class constructor.
	    </para></listitem>
	    <listitem><para>
	      statically defined <emphasis>NativeXAResource</emphasis>
	      must be create (method <function>new</function>) after
	      <emphasis>Transaction Manager</emphasis> object creation
	    </para></listitem>
	    <listitem><para>
	      dynamically defined <emphasis>NativeXAResource</emphasis>
	      must be create (method <function>new</function>) before
	      <emphasis>Transaction Manager</emphasis> object creation
	    </para></listitem>
	    <listitem><para>
	      statically defined <emphasis>NativeXAResource</emphasis> can
	      be enlisted (method <function>enlist</function>), but it's not
	      necessary
	    </para></listitem>
	    <listitem><para>
	      dynamically defined <emphasis>NativeXAResource</emphasis>
	      and <emphasis>AcquiredXAResource</emphasis> must be enlisted
	      (method <function>enlist</function>) to participate in a
	      distributed <emphasis>Transaction</emphasis>
	    </para></listitem>
	  </itemizedlist>
	</para>
      </section>
    </section>
    <section>
      <title>XTA API Reference</title>
      <para>
	XTA API Reference is extracted from source code using
	<link xlink:href="http://www.doxygen.org/">Doxygen</link> tool.
	If you install <filename>doxygen</filename>, it will be produced
	during build phase and stored in directory
	<filename>doc/api/xta/html</filename>.
      </para>
      <para>
	XTA API Reference can be consulted online:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    XTA API Reference for C language:
	    <link xlink:href="http://www.tiian.org/lixa/manuals/xta/C/">
	    http://www.tiian.org/lixa/manuals/xta/C/</link>
	  </para></listitem>
	</itemizedlist>
      </para>
    </section>
  </section>
  <section>
    <title>The <quote>Single Application</quote> Pattern</title>
    <table frame="box">
      <thead>
	<tr><td>The pattern in brief:</td></tr>
      </thead>
      <tbody>
	<tr>
	  <td>Architecture:</td>
	  <td>see <xref linkend="xta_arch02"/></td>
	</tr>
	<tr>
	  <td>Number of Application Programs:</td>
	  <td>exactly 1</td>
	</tr>
	<tr>
	  <td>Number of Resource Managers:</td>
	  <td>many, if 1 single phase commit will be used</td>
	</tr>
	<tr>
	  <td>Number of Branches in the Gloabal Transaction:</td>
	  <td>exactly 1</td>
	</tr>
	<tr>
	  <td>Concurrency among Application Programs:</td>
	  <td>not applicable</td>
	</tr>
      </tbody>
    </table>
    <section>
      <title>Description</title>
      <para>
	This is a traditional Distributed Transaction Processing pattern: a
	single Application Program uses two or more Resource Managers and
	performs a transaction that change the state of both. Here is a list
	of examples:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    RM1 and RM2 are two different databases, for example PostgreSQL and
	    MySQL (or MariaDB): the Application Program moves a record from
	    RM1 (PostgreSQL) to RM2 (MySQL)
	  </para></listitem>
	  <listitem><para>
	    RM1 and RM2 are a messaging system and a database, for example
	    IBM MQ and Oracle Databae Server: the Application Program get a
	    message from a queue, insert a row in a table, remove the message
	    from the queue
	  </para></listitem>
	  <listitem><para>
	    RM1 and RM2 are two different types of database and the 
	    Application Program inserts exactly the same data in both, maybe
	    using a different format
	  </para></listitem>
	</itemizedlist>
	The pattern can be implemented even using the standard TX Transaction
	Demarcation interface, but XTA is much more object oriented.
      </para>
    </section>
    <section>
      <title>How it works</title>
      <figure xml:id="xta_pattern01">
	<title>simplified sequence diagram for the <quote>Single Application
	Program</quote> Pattern</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="../images/LIXA_Development_XTA_04.svg"/>
	  </imageobject>
	</mediaobject>
      </figure>
      <para>
	The above figure shows the logic necessary to build this type of
	application; it's <emphasis>not</emphasis> a formally correct UML
	sequence diagram (all the XTA objects are in the same lifeline), but
	it should be clear enough to understand the
	proper operations sequence:
      </para>
      <itemizedlist mark='bullet'>
	<listitem><para>
	  The Application Program (AP) creates the native
	  objects/connections/handles
	  <footnote><para>
	    Examples: <function>mysql_real_connect</function> for MySQL,
	    <function>PQconnectDB</function> for PostgreSQL.
	  </para></footnote>
	  that are necessary to operate with the Resource Managers
	  <footnote><para>
	    Some Resource Managers, like for example Oracle Database Server,
	    don't allow to be created as <quote>normal</quote> connections
	    and then transformed in <emphasis>XA connections</emphasis>:
	    they must be directly created by XTA.
	  </para></footnote>
	</para></listitem>
	<listitem><para>
	  The AP creates some XTA objects: a
	  <function>TransactionManager</function>,
	  two <function>XaResource</function>
	  and one <function>Transaction</function>
	</para></listitem>
	<listitem><para>
	  The AP <quote>enlists</quote> the XA resources that 
	  <emphasis>must be controlled by the transaction</emphasis>
	  using <function>EnlistResource()</function> method
	</para></listitem>
	<listitem><para>
	  The AP uses the <function>Open()</function> method
	  to initialize the <function>XaResource</function> objects
	</para></listitem>
	<listitem><para>
	  The AP uses the <function>Start()</function> method
	  to start a new XA distributed transaction
	</para></listitem>
	<listitem><para>
	  The AP interacts with the Resource Managers, using the native
	  objects/connections/handles to operate
	  (<quote>doSomething</quote> method in the diagram)
	</para></listitem>
	<listitem><para>
	  The AP uses the <function>Commit()</function> method to commit the
	  distributed transaction, or the <function>Rollback()</function>
	  method to rollback all the changes since
	  <function>Start()</function>
	</para></listitem>
	<listitem><para>
	  The AP cleans-up the environment
	</para></listitem>
      </itemizedlist>
      <note><para>
	The methods listed in the above description must be considered
	<quote>pseudo-code</quote>: the real name and signature is language
	dependent. As an example, 
	<screen>tm = new TransactionManager()</screen> translates to
	<screen>tm = xta_transaction_manager_new()</screen> and
	<screen>tx.Commit()</screen> translates to
	<screen>xta_transaction_commit(tx, FALSE)</screen> in C.
      </para></note>
    </section>
    <section>
      <title>Example</title>
      <para>
	The supplied example (<filename>example_xta_sa01.c</filename>) uses
	PostgreSQL in the role of <quote>Resource Manager 1</quote> and MySQL
	(or MariaDB) in the role of <quote>Resource Manager 2</quote>; please
	refer to the instructions explained :
	<itemizedlist mark="bullet">
	  <listitem><para>
	    in <xref linkend="App_RM_Config_MySQL"/>
	    to set-up a running environment for MySQL server
	  </para></listitem>
	  <listitem><para>
	    in <xref linkend="App_RM_Config_PostgreSQL"/>
	    to set-up a running environment for PostgreSQL server
	  </para></listitem>
	  <listitem><para>
	    in <xref linkend="Starting_the_state_server"/>
	    to start up the LIXA state server
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	Create a working directory in a place you are comfortable with:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~$ cd
tiian@ubuntu1404-64:~$ mkdir tmp
tiian@ubuntu1404-64:~$ cd tmp
tiian@ubuntu1404-64:~/tmp$ 
	  </screen></td></tr></tbody>
	</table>
      </para>
      <para>
	Copy file <filename>example_xta_sa01.c</filename> in your working dir:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu:~/tmp$ cp /opt/lixa/share/doc/lixa-X.Y.Z/examples/xta/example_xta_sa01.c .
	  </screen></td></tr></tbody>
	</table>
	Substitute <quote>X.Y.Z</quote> with the actual version of
	the software you installed.
      </para>
      <para>
	Compile and link the C example program:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ . /opt/lixa/bin/lixa_env.sh 
tiian@ubuntu1404-64:~/tmp$ gcc example_xta_sa01.c $(lixa-config -x -c -f -l -d) -lpq $(mysql_config --libs_r) -o example_xta_sa01
	  </screen></td></tr></tbody>
	</table>
      </para>
      <para>
	If the previous steps worked for you, you should have an executable
	file of name <filename>example_xta_sa01</filename> in your current 
	directory:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:/tmp$ ls -l
total 32
-rwxrwxr-x 1 tiian tiian 18603 mar 20 22:56 example_xta_sa01
-rw-r--r-- 1 tiian tiian  8302 mar 20 22:50 example_xta_sa01.c
	  </screen></td></tr></tbody>
	</table>
	The example program accepts two arguments:
	<itemizedlist mark="bullet">
          <listitem><para>
	    commit (or rollback): use <quote>1</quote> if you want to perform
	    a global commit or <quote>0</quote> if you want to perform a global
	    rollback
	  </para></listitem>
          <listitem><para>
	    insert (or delete): use <quote>1</quote> if you want to insert rows
	    in databases or <quote>0</quote> if you want to delete rows from
	    databases
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	Open three terminal sessions: one for example execution,
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ls -la
total 40
drwxrwxr-x  2 tiian tiian  4096 mar 20 23:13 .
drwxr-xr-x 12 tiian tiian  4096 mar 21 22:17 ..
-rwxrwxr-x  1 tiian tiian 18603 mar 20 23:13 example_xta_sa01
-rw-r--r--  1 tiian tiian  8302 mar 20 23:08 example_xta_sa01.c
	  </screen></td></tr></tbody>
	</table>
	one for PostgreSQL queries
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - PostgreSQL]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~$ psql testdb
psql (9.3.22)
Type "help" for help.

testdb=>
	  </screen></td></tr></tbody>
	</table>
	and one for MySQL queries
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - MySQL]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~$ mysql -h localhost -u lixa lixa
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 36
Server version: 5.5.59-0ubuntu0.14.04.1 (Ubuntu)

Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql>
	  </screen></td></tr></tbody>
	</table>
	set <varname>LIXA_PROFILE</varname> environment variable to
	<constant>XTA_DYN</constant>
	a profile without static Resource Managers defined in
	<filename>lixac_conf.xml</filename>:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ export LIXA_PROFILE=XTA_DYN
tiian@ubuntu1404-64:~/tmp$ echo $LIXA_PROFILE
XTA_DYN
	  </screen></td></tr></tbody>
	</table>
	insert rows in tables and commit:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_sa01 1 1
PostgreSQL, executing &gt;INSERT INTO authors VALUES(1921, 'Rigoni Stern', 'Mario')&lt;
MySQL, executing &gt;INSERT INTO authors VALUES(1919, 'Levi', 'Primo')&lt;
tiian@ubuntu1404-64:~/tmp$
	  </screen></td></tr></tbody>
	</table>
	check PostgreSQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - PostgreSQL]</td></tr></thead>
	  <tbody><tr><td><screen>
testdb=&gt; select * from authors;
  id  |  last_name   | first_name 
------+--------------+------------
 1921 | Rigoni Stern | Mario
(1 row)

testdb=&gt;
	  </screen></td></tr></tbody>
	</table>
	check MySQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - MySQL]</td></tr></thead>
	  <tbody><tr><td><screen>
mysql> select * from authors;
+------+-----------+------------+
| id   | last_name | first_name |
+------+-----------+------------+
| 1919 | Levi      | Primo      |
+------+-----------+------------+
1 row in set (0.00 sec)

mysql>
	  </screen></td></tr></tbody>
	</table>
	delete rows from tables, but rollback:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_sa01 0 0
PostgreSQL, executing &gt;DELETE FROM authors WHERE id=1921&lt;
MySQL, executing &gt;DELETE FROM authors WHERE id=1919&lt;
tiian@ubuntu1404-64:~/tmp$
	  </screen></td></tr></tbody>
	</table>
	check PostgreSQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - PostgreSQL]</td></tr></thead>
	  <tbody><tr><td><screen>
testdb=&gt; select * from authors;
  id  |  last_name   | first_name 
------+--------------+------------
 1921 | Rigoni Stern | Mario
(1 row)

testdb=&gt;
	  </screen></td></tr></tbody>
	</table>
	check MySQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - MySQL]</td></tr></thead>
	  <tbody><tr><td><screen>
mysql> select * from authors;
+------+-----------+------------+
| id   | last_name | first_name |
+------+-----------+------------+
| 1919 | Levi      | Primo      |
+------+-----------+------------+
1 row in set (0.00 sec)

mysql>
	  </screen></td></tr></tbody>
	</table>
	delete rows and commit:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_sa01 1 0
PostgreSQL, executing &gt;DELETE FROM authors WHERE id=1921&lt;
MySQL, executing &gt;DELETE FROM authors WHERE id=1919&lt;
tiian@ubuntu1404-64:~/tmp$
	  </screen></td></tr></tbody>
	</table>
	check PostgreSQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - PostgreSQL]</td></tr></thead>
	  <tbody><tr><td><screen>
testdb=> select * from authors;
 id | last_name | first_name 
----+-----------+------------
(0 rows)

testdb=>
	  </screen></td></tr></tbody>
	</table>
	check MySQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - MySQL]</td></tr></thead>
	  <tbody><tr><td><screen>
mysql> select * from authors;
Empty set (0.00 sec)

mysql>
	  </screen></td></tr></tbody>
	</table>
      </para>
    </section>
    <section>
      <title>Source Code</title>
      <para>
	Source code for program <filename>example_xta_sa01.c</filename> is
	installed in directory
	<filename>/opt/lixa/share/doc/lixa-X.Y.Z/examples/xta</filename> and
	is available on <link xlink:href="https://github.com/tiian/lixa/blob/master/doc/examples/xta/example_xta_sa01.c">GitHub</link>. Source code is fully
	commented for readability.
      </para>
    </section>
  </section>
  <section>
    <title>The
    <quote>Multiple Applications, Consecutive Calls</quote>
    Pattern</title>
    <table frame="box">
      <thead>
	<tr><td>The pattern in brief:</td></tr>
      </thead>
      <tbody>
	<tr>
	  <td>Architecture:</td>
	  <td>see <xref linkend="xta_arch03"/></td>
	</tr>
	<tr>
	  <td>Number of Application Programs:</td>
	  <td>2 or more</td>
	</tr>
	<tr>
	  <td>Number of Resource Managers:</td>
	  <td>1 or more for every Application Program</td>
	</tr>
	<tr>
	  <td>Number of Branches in the Gloabal Transaction:</td>
	  <td>1 for every Application Program</td>
	</tr>
	<tr>
	  <td>Concurrency among Application Programs:</td>
	  <td>no, strictly consecutive executive</td>
	</tr>
      </tbody>
    </table>
    <section>
      <title>Description</title>
      <para>
	This is a Distributed Transaction Processing pattern introduced by XTA:
	two or more Application Programs use the same Resource Manager(s) and
	perform consecutive operations inside a single XA global transaction.
	The Resource Manager(s) must be able to suspend and resume the
	thread's association with the transaction
	branch: this feature is part of the XA standard, but some resource
	managers don't support it (for example MySQL, MariaDB and PostgreSQL).
      </para>
      <para>
	The following picture shows an example that can be implemented using
	Oracle RDBMS:
	<figure xml:id="xta_pattern06">
	  <title>example of <quote>Multiple Applications, 
	  Consecutive Calls</quote> with two Application Programs and one
	  Resource Manager</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_06.svg"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	The pattern can <emphasis>not</emphasis> be implemented using the
	standard TX Transaction	Demarcation interface
	<footnote><para>
	  Transaction Coupling (TC) TX extensions supports the pattern with
	  a traditional TX like interface
	  (see <xref linkend="Development_TC"/>)
	</para></footnote>.
      </para>
    </section>
    <section>
      <title>How it works</title>
      <figure xml:id="xta_pattern07">
	<title>The
	<quote>Multiple Applications, Consecutive Calls</quote>
	Pattern</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="../images/LIXA_Development_XTA_07.svg"/>
	  </imageobject>
	</mediaobject>
      </figure>
      <para>
	The above figure shows the logic necessary to build this type of
	applications; it's <emphasis>not</emphasis> a formally correct UML
	sequence diagram (all the XTA objects are in the same lifeline), but
	it should be clear enough to understand the
	proper operations sequence:
      </para>
      <itemizedlist mark='bullet'>
	<listitem><para>
	  The first AP creates some XTA objects: a
	  <function>XaResource</function>, a
	  <function>TransactionManager</function>,
	  and one <function>Transaction</function>
	</para></listitem>
	<listitem><para>
	  The first AP <quote>enlists</quote> the XA resource that 
	  <emphasis>must be controlled by the transaction</emphasis>
	  using <function>EnlistResource()</function> method
	</para></listitem>
	<listitem><para>
	  The first AP uses the <function>Open()</function> method
	  to initialize the <function>XaResource</function> objects
	</para></listitem>
	<listitem><para>
	  The first AP uses the <function>Start()</function> method
	  to start a new XA distributed transaction
	</para></listitem>
	<listitem><para>
	  The first AP interacts with the Resource Manager using the native
	  objects/connections/handles to operate
	  (<quote>doSomething</quote> method in the diagram). The example is
	  based on Oracle DBMS: environment is retrieved with 
	  <function>xaoEnv()</function>, context is retrieved with
	  <function>xaoSvcCtx()</function> and connection handle is retrieved
	  with <function>OCIHandleAlloc</function>
	</para></listitem>
	<listitem><para>
	  The first AP <emphasis>suspends</emphasis> its thread's association
	  with the transaction using <function>Suspend()</function> method
	  and then it retrieves the Transaction Id (XID) using
	  <function>GetXid()</function> method
	</para></listitem>
	<listitem><para>
	  The first AP is now able to pass the Transaction Id (XID) to the
	  second AP: it can use any type of communication protocol able to
	  send an ASCII string
	</para></listitem>
	<listitem><para>
	  At this point, first AP terminates its processing and the second AP
	  takes the control of the transaction using
	  <function>Resume()</function> method
	</para></listitem>
	<listitem><para>
	  The second AP interacts with the Resource Manager using the native
	  objects/connections/handles to operate
	  (<quote>doSomething</quote> method in the diagram)
	</para></listitem>
	<listitem><para>
	  The second AP commit the transaction using
	  <function>Commit()</function> method (alternatively it could rollback
	  the transaction using <function>Rollback()</function> method)
	</para></listitem>
	<listitem><para>
	  The second AP terminates its processing
	</para></listitem>
      </itemizedlist>
      <important><para>
	These are the relevant elements of this pattern:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    The first Application Program starts a new Transaction, performs
	    some activities with the Resource Manager(s), suspends its
	    association with the Transaction and passes the XID to the second
	    Application Program
	  </para></listitem>
	  <listitem><para>
	    The second Application Program sets up its XTA objects, but it
	    does not start a new Transaction: it must wait the XID from the
	    first Application Program, resumes the Transaction and completes
	    the work
	  </para></listitem>
	  <listitem><para>
	    The pattern does <emphasis>not</emphasis> allow concurrent access
	    to the same Resource Manager(s): only one Application Program at a
	    time can be associated to the same global transaction
	  </para></listitem>
	  <listitem><para>
	    There's basically no limit to the number of different Application
	    Programs that consecutively participate into the Transaction
	  </para></listitem>
	  <listitem><para>
	    There's no constraint to the number of different programming
	    languages used: every Application Program can be developed using
	    a different programming language supported by XTA
	  </para></listitem>
	  <listitem><para>
	    There's no constraint to communication protocol used by 
	    Application Programs to exchange information: REST API, SOAP based
	    web services, CORBA, RPC, any network protocol, any inter process
	    communication, etc... XTA does <emphasis>not</emphasis> force the
	    developer to use a specific communication protocol: any technique
	    suitable to send an ASCII string can be used
	  </para></listitem>
	</itemizedlist>
      </para></important>
      <note><para>
	The methods listed in the above description must be considered
	<quote>pseudo-code</quote>: the real name and signature is language
	dependent. As an example, 
	<screen>tm = new TransactionManager()</screen> translates to
	<screen>tm = xta_transaction_manager_new()</screen> and
	<screen>tx.Commit()</screen> translates to
	<screen>xta_transaction_commit(tx, FALSE)</screen> in C.
      </para></note>
    </section>
    <section>
      <title>Example</title>
      <para>
	The supplied example (<filename>example_xta_macc01.c</filename>) uses
	Oracle in the role of <quote>Resource Manager 1</quote>; please
	refer to the instructions explained:
	<itemizedlist mark="bullet">
	  <listitem><para>
	    in <xref linkend="App_RM_Config_Oracle_Remote"/> 
	    to set-up the correct client/server configuration for Oracle
	  </para></listitem>
	  <listitem><para>
	    in <xref linkend="Starting_the_state_server"/>
	    to start up the LIXA state server
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	Create a working directory in a place you are comfortable with:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~$ cd
tiian@ubuntu1404-64:~$ mkdir tmp
tiian@ubuntu1404-64:~$ cd tmp
tiian@ubuntu1404-64:~/tmp$ 
	  </screen></td></tr></tbody>
	</table>
      </para>
      <para>
	Copy file <filename>example_xta_macc01.c</filename> in your working
	dir:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
	    tiian@ubuntu:~/tmp$ cp /opt/lixa/share/doc/lixa-X.Y.Z/examples/xta/example_xta_macc01.c .
	  </screen></td></tr></tbody>
	</table>
	Substitute <quote>X.Y.Z</quote> with the actual version of
	the software you installed.
      </para>
      <para>
	Compile and link the C example program:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ . /opt/lixa/bin/lixa_env.sh 
tiian@ubuntu1404-64:~/tmp$ gcc example_xta_macc01.c $(lixa-config -x -c -f -l -d) \
> -I/opt/oracle/instantclient_12_1/sdk/include \
> -L/opt/oracle/instantclient_12_1 \
> -Wl,-rpath -Wl,/opt/oracle/instantclient_12_1 \
> -l clntsh -l nnz12 -o example_xta_macc01
	  </screen></td></tr></tbody>
	</table>
      </para>
      <para>
	If the previous steps worked for you, you should have an executable file
	of name <filename>example_xta_sa01</filename> in your current 
	directory:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ls -l
total 36
-rwxrwxr-x 1 tiian tiian 18647 mar 27 21:51 example_xta_macc01
-rw-r--r-- 1 tiian tiian 12828 mar 27 21:50 example_xta_macc01.c
	  </screen></td></tr></tbody>
	</table>
	The example program accepts four arguments:
	<itemizedlist mark="bullet">
          <listitem><para>
	    commit (or rollback): use <quote>1</quote> if you want to perform
	    a global commit or <quote>0</quote> if you want to perform a global
	    rollback
	  </para></listitem>
          <listitem><para>
	    insert (or delete): use <quote>1</quote> if you want to insert rows
	    in databases or <quote>0</quote> if you want to delete rows from
	    databases
	  </para></listitem>
          <listitem><para>
	    superior (or subordinate): use <quote>1</quote> if you want to
	    execute the <quote>superior</quote> part depicted in the
	    sequence diagram (<quote>Application Program 1</quote>) or
	    <quote>0</quote> if you want to execute the
	    <quote>subordinate</quote> part depicted in the sequence diagram
	    (<quote>Application Program 2</quote>)
	  </para></listitem>
          <listitem><para>
	    XIDfilename: a valid name for a file that must be used to transfer
	    XID (Transaction ID) from <quote>Application Program 1</quote> to
	    <quote>Application Program 2</quote>; XIDfilename can be the name
	    of a regular file or of a FIFO (named pipe)
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	Open three terminal sessions: one for Application Program 1
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP1]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ls -la
total 44
drwxrwxr-x  2 tiian tiian  4096 mar 27 22:06 .
drwxr-xr-x 12 tiian tiian  4096 mar 27 21:52 ..
-rwxrwxr-x  1 tiian tiian 18647 mar 27 21:51 example_xta_macc01
-rw-r--r--  1 tiian tiian 12828 mar 27 21:50 example_xta_macc01.c
	  </screen></td></tr></tbody>
	</table>
	another one for Application Program 2
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP2]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ls -la
total 44
drwxrwxr-x  2 tiian tiian  4096 mar 27 22:06 .
drwxr-xr-x 12 tiian tiian  4096 mar 27 21:52 ..
-rwxrwxr-x  1 tiian tiian 18647 mar 27 21:51 example_xta_macc01
-rw-r--r--  1 tiian tiian 12828 mar 27 21:50 example_xta_macc01.c
	  </screen></td></tr></tbody>
	</table>
	and the last one for Oracle <command>sqlplus</command> client
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - Oracle]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~$ . ./oracle_env.sh 
tiian@ubuntu1404-64:~$ sqlplus hr/hr@lixa_ora_db

SQL*Plus: Release 12.1.0.2.0 Production on Tue Mar 27 22:08:39 2018

Copyright (c) 1982, 2014, Oracle.  All rights reserved.

Last Successful login time: Tue Mar 27 2018 22:00:12 +02:00

Connected to:
Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

SQL&gt;
	  </screen></td></tr></tbody>
	</table>
	create a FIFO (named pipe) in current directory:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP1]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ mkfifo xid.fifo
tiian@ubuntu1404-64:~/tmp$ ls -la
total 44
drwxrwxr-x  2 tiian tiian  4096 mar 27 22:10 .
drwxr-xr-x 12 tiian tiian  4096 mar 27 21:52 ..
-rwxrwxr-x  1 tiian tiian 18647 mar 27 21:51 example_xta_macc01
-rw-r--r--  1 tiian tiian 12828 mar 27 21:50 example_xta_macc01.c
prw-rw-r--  1 tiian tiian     0 mar 27 22:10 xid.fifo
	  </screen></td></tr></tbody>
	</table>
	set <varname>LIXA_PROFILE</varname> environment variable to
	<constant>XTA_DYN</constant> a profile without static 
	Resource Managers defined in
	<filename>lixac_conf.xml</filename>:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP1]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ export LIXA_PROFILE=XTA_DYN
tiian@ubuntu1404-64:~/tmp$ echo $LIXA_PROFILE
XTA_DYN
	  </screen></td></tr></tbody>
	</table>
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP2]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ export LIXA_PROFILE=XTA_DYN
tiian@ubuntu1404-64:~/tmp$ echo $LIXA_PROFILE
XTA_DYN
	  </screen></td></tr></tbody>
	</table>
	in the first terminal session, start
	<command>example_xta_macc01</command> in the role of AP1 and in the
	second terminal session, start <command>example_xta_macc01</command>
	in the role of AP2
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP1]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_macc01 1 1 1 xid.fifo 
OCI statement &gt;INSERT INTO authors (ID, LAST_NAME, FIRST_NAME) VALUES(1930, 'Bonatti', 'Walter')&lt; completed
XID='1279875137.67f9ed180b7f4fe8a9d0f749a0f9e90b.5ed2d6ffa60ad419517220dd5ab2719e' has been written in file 'xid.fifo'
	  </screen></td></tr></tbody>
	</table>
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP2]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_macc01 1 1 0 xid.fifo 
XID='1279875137.67f9ed180b7f4fe8a9d0f749a0f9e90b.5ed2d6ffa60ad419517220dd5ab2719e' has been read from file 'xid.fifo'
OCI statement &gt;INSERT INTO authors (ID, LAST_NAME, FIRST_NAME) VALUES(1948, 'Casarotto', 'Renato')&lt; completed
	  </screen></td></tr></tbody>
	</table>
	<note><para>
	  Application Program 1 suspends its execution and waits 
	  Application Program 2 start: this is a consequence of the FIFO
	  behavior
	</para></note>
	check Oracle table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - Oracle]</td></tr></thead>
	  <tbody><tr><td><screen>
SQL&gt; select * from authors;

ID         LAST_NAME            FIRST_NAME
---------- -------------------- --------------------
1930       Bonatti              Walter
1948       Casarotto            Renato

	  </screen></td></tr></tbody>
	</table>
	use a regular file to perform a <command>SQL DELETE</command> followed
	by a rollback:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP1]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_macc01 0 0 1 xid.txt
OCI statement &gt;DELETE FROM authors WHERE ID=1930&lt; completed
XID='1279875137.1f31836dab1a4081b488a9b3565faaa4.7b4180ecb8fee8c12cbc13637ab4eabb' has been written in file 'xid.txt'
	  </screen></td></tr></tbody>
	</table>
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP2]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_macc01 0 0 0 xid.txt
XID='1279875137.1f31836dab1a4081b488a9b3565faaa4.7b4180ecb8fee8c12cbc13637ab4eabb' has been read from file 'xid.txt'
OCI statement &gt;DELETE FROM authors WHERE ID=1948&lt; completed
	  </screen></td></tr></tbody>
	</table>
	<note><para>
	  Application Program 1 ends its execution without waiting for
	  Application Program 2 start: this is a consequence of the regular
	  file behavior
	</para></note>
	check Oracle table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - Oracle]</td></tr></thead>
	  <tbody><tr><td><screen>
SQL&gt; select * from authors;

ID         LAST_NAME            FIRST_NAME
---------- -------------------- --------------------
1930       Bonatti              Walter
1948       Casarotto            Renato

	  </screen></td></tr></tbody>
	</table>
	as expected, the two rows are still in the table because the XA global
	transaction has been rolled back by Application Program 2; XA functions
	executed by Oracle can be inspected in its trace file:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP1]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ tail -n 30 /tmp/xa_NULL03272018.trc 
224024.9416.4016678528.2:
xaorollback: xid=0x4c495841-1f31836dab1a4081b488a9b3565faaa4-7b4180ecb8fee8c12cbc13637ab4eabb, rmid=0, flags=0x0


224024.9416.4016678528.2:
OCITransRollback: Attempting


224024.9416.4016678528.2:
OCITransRollback: Succeeded


224024.9416.4016678528.2:
xaorollback: rtn 0


224024.9416.4016678528.2:
xaoclose: xa_info=, rmid=0, flags=0x0


224024.9416.4016678528.2:
OCIServerDetach: Attempting


224024.9416.4016678528.2:
OCIServerDetach: Succeeded


224024.9416.4016678528.2:
xaoclose: rtn 0
	  </screen></td></tr></tbody>
	</table>
	to complete the exercise, use a regular file to perform a
	<command>SQL DELETE</command> followed by a commit:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP1]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_macc01 1 0 1 xid.txt
OCI statement &gt;DELETE FROM authors WHERE ID=1930&lt; completed
XID='1279875137.bfd10e4a5fc541f587727304ae34cccf.7b4180ecb8fee8c12cbc13637ab4eabb' has been written in file 'xid.txt'
	  </screen></td></tr></tbody>
	</table>
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP2]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_macc01 1 0 0 xid.txt
XID='1279875137.bfd10e4a5fc541f587727304ae34cccf.7b4180ecb8fee8c12cbc13637ab4eabb' has been read from file 'xid.txt'
OCI statement &gt;DELETE FROM authors WHERE ID=1948&lt; completed
	  </screen></td></tr></tbody>
	</table>
	check Oracle table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - Oracle]</td></tr></thead>
	  <tbody><tr><td><screen>
SQL&gt; select * from authors;

no rows selected

	  </screen></td></tr></tbody>
	</table>
	Finally the table is empty; XA functions
	executed by Oracle can be inspected in its trace file:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - AP1]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ tail -n 50 /tmp/xa_NULL03272018.trc 
225247.14985.1108846208.0:
xaostart: return XA_OK


225247.14985.1108846208.0:
xaoend: xid=0x4c495841-bfd10e4a5fc541f587727304ae34cccf-7b4180ecb8fee8c12cbc13637ab4eabb, rmid=0, flags=0x4000000


225247.14985.1108846208.0:
OCITransDetach: Attempting


225247.14985.1108846208.0:
OCITransDetach: Succeeded


225247.14985.1108846208.0:
xaoend: return 0


225247.14985.1108846208.0:
xaocommit: xid=0x4c495841-bfd10e4a5fc541f587727304ae34cccf-7b4180ecb8fee8c12cbc13637ab4eabb, rmid=0, flags=0x40000000


225247.14985.1108846208.0:
OCITransCommit: Attempting


225247.14985.1108846208.0:
OCITransCommit: Succeeded


225247.14985.1108846208.0:
xaocommit: rtn 0


225247.14985.1108846208.0:
xaoclose: xa_info=, rmid=0, flags=0x0


225247.14985.1108846208.0:
OCIServerDetach: Attempting


225247.14985.1108846208.0:
OCIServerDetach: Succeeded


225247.14985.1108846208.0:
xaoclose: rtn 0
	  </screen></td></tr></tbody>
	</table>
	The trace shows that XTA performed a <quote>one phase commit</quote>
	instead of a <quote>two phase commit</quote> because there's only one
	Resource Manager (hint: function <function>xaoprepare</function> has
	not been called by the Transaction Manager).
      </para>
    </section>
    <section>
      <title>Source Code</title>
      <para>
	Source code for program <filename>example_xta_macc01.c</filename> is
	installed in directory
	<filename>/opt/lixa/share/doc/lixa-X.Y.Z/examples/xta</filename> and
	is available on <link xlink:href="https://github.com/tiian/lixa/blob/master/doc/examples/xta/example_xta_macc01.c">GitHub</link>. Source code is fully
	commented for readability.
      </para>
    </section>
  </section>
  <section>
    <title>The
    <quote>Multiple Applications, Concurrent Branches/Pseudo Synchronous</quote>
    Pattern</title>
    <table frame="box">
      <thead>
	<tr><td>The pattern in brief:</td></tr>
      </thead>
      <tbody>
	<tr>
	  <td>Architecture:</td>
	  <td>see <xref linkend="xta_arch03"/></td>
	</tr>
	<tr>
	  <td>Number of Application Programs:</td>
	  <td>2 or more</td>
	</tr>
	<tr>
	  <td>Number of Resource Managers:</td>
	  <td>1 or more for every Application Program</td>
	</tr>
	<tr>
	  <td>Number of Branches in the Gloabal Transaction:</td>
	  <td>1 for every Application Program</td>
	</tr>
	<tr>
	  <td>Concurrency among Application Programs:</td>
	  <td>yes, subordinate AP prepares the transaction, returns control to superior AP and finally completes commit</td>
	</tr>
      </tbody>
    </table>
  </section>
  <section>
    <title>The
    <quote>Multiple Applications, Concurrent Branches/Pseudo Asynchronous</quote>
    Pattern</title>
    <table frame="box">
      <thead>
	<tr><td>The pattern in brief:</td></tr>
      </thead>
      <tbody>
	<tr>
	  <td>Architecture:</td>
	  <td>see <xref linkend="xta_arch03"/></td>
	</tr>
	<tr>
	  <td>Number of Application Programs:</td>
	  <td>2 or more</td>
	</tr>
	<tr>
	  <td>Number of Resource Managers:</td>
	  <td>1 or more for every Application Program</td>
	</tr>
	<tr>
	  <td>Number of Branches in the Gloabal Transaction:</td>
	  <td>1 for every Application Program</td>
	</tr>
	<tr>
	  <td>Concurrency among Application Programs:</td>
	  <td>yes, subordinate AP creates a new branch and then executes asynchronously</td>
	</tr>
      </tbody>
    </table>
  </section>
</chapter>
