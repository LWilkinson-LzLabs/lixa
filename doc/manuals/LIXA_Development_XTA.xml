<chapter xml:id="Development_XTA">
  <title>Developing Application Programs using XTA (XA Transactional API) interface</title>
  <para>
    This chapter explains how you can develop applications that use XTA 
    interface.
  </para>
  <section>
    <title>XTA introduction</title>
    <para>
      This section introduces some basic concepts for a better comprehension of
      the following more technical ones.
    </para>
    <section>
      <title>Why XTA?</title>
      <para>
	The TX Transaction Demarcation Specification
	<citation>TXspec</citation>, published in 1995 by
	X/Open is a programming interface that has been designed for:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    C and COBOL programming languages
	  </para></listitem>
	  <listitem><para>
	    single thread applications
	  </para></listitem>
	  <listitem><para>
	    applications executed under the control of TP Monitors
	  </para></listitem>
	  <listitem><para>
	    implicit (static) transactional context
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	The DTP Reference Model Version 3
	<citation>RefModel</citation>, published in 1996 by X/Open is a
	programming model that has been designed for:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    applications executed under the control of TP Monitors
	  </para></listitem>
	  <listitem><para>
	    TP Monitors with integrated Transaction Managers
	  </para></listitem>
	  <listitem><para>
	    tight coupling between couple of Transaction Managers to propagate
	    transactional contexts and to coordinated distributed transactions
	    among different systems
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	All the above assumptions are no more up-to-date in the cloud native
	programming models like CaaS (Container as a Service), 
	PaaS (Platform as a Service) and FaaS (Function as a Service).
      </para>
      <para>
	XTA aims to provide TXaaS (Transaction as a Service) backend services
	that can be used by cloud native applications that for one reason or
	another require two phase commit ACID transactions among distributed
	applications
	<footnote><para>
	  Many authors consider two phase commit the root of every evil in
	  the realm of massively distributed applications, but the author of
	  XTA thinks that some specific use cases can take advantage from 
	  two phase commit transactionality.
	</para></footnote>.
      </para>
    </section>
    <section>
      <title>XTA architecture</title>
      <para>
	<figure xml:id="xta_arch01">
	  <title>Software stacks of an XTA application</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_01.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	The above picture explains the software stack architecture for an XTA
	application: the <emphasis>Application Program</emphasis> interacts
	with XA <emphasis>Resource Managers</emphasis> like PostgreSQL and
	MySQL with <emphasis>XTA</emphasis>.
	<emphasis>XTA</emphasis> wraps <emphasis>LIXA</emphasis> libraries that
	interact with the <emphasis>Resource Managers</emphasis> and implement
	the client side part of the transaction management logic.
      </para>
      <para>
	<figure xml:id="xta_arch02">
	  <title>Single application layout</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_02.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	The simplest deployment of an XTA application consists of a single
	<emphasis>Application Program</emphasis> that uses one or more
	<emphasis>Resource Managers</emphasis> in a distributed transaction.
	<emphasis>XTA</emphasis> connects to <emphasis>LIXA state server
	(<command>lixad</command>)</emphasis> to coordinate the XA two phase
	commit protocol.
	<emphasis>Application Program</emphasis>,
	<emphasis>Resource Managers</emphasis> and
	<emphasis>LIXA state server</emphasis> does not have to reside in the
	same system: they can be distributed in different systems that
	communicate by mean of TCP/IP protocol.
      </para>
      <para>
	<figure xml:id="xta_arch03">
	  <title>Multiple applications layout</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_03.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	XTA allows deployment of multiple
	<emphasis>Application Programs</emphasis> that use one or more
	<emphasis>Resource Managers</emphasis> in a distributed transaction.
	<emphasis>XTA</emphasis> connects to <emphasis>LIXA state server
	(<command>lixad</command>)</emphasis> to coordinate the XA two phase
	commit protocol.
	<emphasis>Application Programs</emphasis>,
	<emphasis>Resource Managers</emphasis> and
	<emphasis>LIXA state server</emphasis> does not have to reside in the
	same system: they can be distributed in different systems that
	communicate by mean of TCP/IP protocol.
      </para>
      <note>
	<para>
	  <emphasis>XTA</emphasis>, in comparison with the standard TX
	  interface, implements the logic necessary to distribute a
	  global transaction between two or more
	  <emphasis>Application Programs</emphasis> but it does not provide
	  the communication protocol between them. Using the above picture as
	  an example, it's in charge of
	  <emphasis>Application Program 1</emphasis> to exchange information
	  with <emphasis>Application Program 2</emphasis>: any synchronous or
	  asynchronous protocol can be used.
	</para>
	<para>
	  Anyway, two constraints can't be violated:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
	      all the <emphasis>Application Programs</emphasis> that
	      participate in the same global transaction, must connect to the
	      same <emphasis>LIXA state server</emphasis>
	    </para></listitem>
	    <listitem><para>
	      the <emphasis>Application Programs</emphasis> must call XTA
	      functions in the proper order to partipate in the same global
	      transaction
	    </para></listitem>
	  </itemizedlist>
	</para>
      </note>
    </section>
  </section>
</chapter>
