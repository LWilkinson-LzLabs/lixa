<chapter xml:id="Development_XTA"
	 xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Developing Application Programs using XTA (XA Transaction API) interface</title>
  <para>
    This chapter explains what XTA is and how you can develop applications
    that use XTA interface.
  </para>
  <section>
    <title>XTA Introduction</title>
    <para>
      This section introduces some basic concepts for a better comprehension of
      XTA topic.
    </para>
    <section>
      <title>Why XTA?</title>
      <para>
	The TX Transaction Demarcation Specification
	<citation>TXspec</citation>, published in 1995 by
	X/Open is a programming interface that has been designed for:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    C and COBOL programming languages
	  </para></listitem>
	  <listitem><para>
	    single thread applications
	  </para></listitem>
	  <listitem><para>
	    applications executed under the control of TP Monitors
	  </para></listitem>
	  <listitem><para>
	    implicit (static) transactional context
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	The DTP Reference Model Version 3
	<citation>RefModel</citation>, published in 1996 by X/Open is a
	programming model that has been designed for:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    applications executed under the control of TP Monitors
	  </para></listitem>
	  <listitem><para>
	    TP Monitors with integrated Transaction Managers
	  </para></listitem>
	  <listitem><para>
	    tight coupling between couple of Transaction Managers to propagate
	    transactional contexts and to coordinated distributed transactions
	    among different systems
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	All the above assumptions are no more up-to-date in the cloud native
	programming models like CaaS (Container as a Service), 
	PaaS (Platform as a Service) and FaaS (Function as a Service).
      </para>
      <para>
	XTA aims to provide TXaaS (Transaction as a Service) backend services
	that can be used by cloud native applications that, for one reason or
	another, require two phase commit ACID transactions among distributed
	applications.
	<footnote><para>
	  Many authors consider two phase commit the root of every evil in
	  the realm of massively distributed applications, but the author of
	  XTA thinks that some specific use cases can take advantage from 
	  two phase commit transactionality
	</para></footnote>.
      </para>
    </section>
    <section>
      <title>XTA Architecture</title>
      <para>
	<figure xml:id="xta_arch01">
	  <title>Software stacks of an XTA application</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_01.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	The above picture explains the software stack architecture for an XTA
	application: the <emphasis>Application Program</emphasis> interacts
	with XA <emphasis>Resource Managers</emphasis>, like PostgreSQL and
	MySQL, and with <emphasis>XTA</emphasis>.
	<emphasis>XTA</emphasis> wraps <emphasis>LIXA</emphasis> libraries that
	interact with the <emphasis>Resource Managers</emphasis> and implement
	the client side part of the transaction management logic.
      </para>
      <para>
	<figure xml:id="xta_arch02">
	  <title>Single application layout</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_02.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	The simplest deployment of an XTA application consists of a single
	<emphasis>Application Program</emphasis> that uses one or more
	<emphasis>Resource Managers</emphasis> in a distributed transaction.
	<emphasis>XTA</emphasis> connects to <emphasis>LIXA state server
	(<command>lixad</command>)</emphasis> to coordinate the XA two phase
	commit protocol.
	<emphasis>Application Program</emphasis>,
	<emphasis>Resource Managers</emphasis> and
	<emphasis>LIXA state server</emphasis> does not have to reside in the
	same system: they can be distributed in different systems that
	communicate by mean of the TCP/IP protocol.
      </para>
      <para>
	<figure xml:id="xta_arch03">
	  <title>Multiple applications layout</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="../images/LIXA_Development_XTA_03.png"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	XTA allows deployment of multiple
	<emphasis>Application Programs</emphasis> that use one or more
	<emphasis>Resource Managers</emphasis> in a distributed transaction.
	<emphasis>XTA</emphasis> connects to <emphasis>LIXA state server
	(<command>lixad</command>)</emphasis> to coordinate the XA two phase
	commit protocol.
	<emphasis>Application Programs</emphasis>,
	<emphasis>Resource Managers</emphasis> and
	<emphasis>LIXA state server</emphasis> does not have to reside in the
	same system: they can be distributed in different systems that
	communicate by mean of the TCP/IP protocol.
      </para>
      <note>
	<para>
	  <emphasis>XTA</emphasis>, in comparison with the standard TX
	  interface, implements the logic necessary to distribute a
	  global transaction between two or more
	  <emphasis>Application Programs</emphasis> but it does not provide
	  the communication protocol between them. Using the above picture as
	  an example, it's in charge of
	  <emphasis>Application Program 1</emphasis> to exchange information
	  with <emphasis>Application Program 2</emphasis>: any synchronous or
	  asynchronous protocol can be used.
	</para>
	<para>
	  Anyway, two constraints can't be violated:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
	      all the <emphasis>Application Programs</emphasis> that
	      participate in the same global transaction, must connect to the
	      same <emphasis>LIXA state server</emphasis>
	    </para></listitem>
	    <listitem><para>
	      the <emphasis>Application Programs</emphasis> must call XTA
	      functions in the proper order to partipate in the same global
	      transaction
	    </para></listitem>
	  </itemizedlist>
	</para>
	<para>
	  XTA does not constraint many other aspects:
	  <itemizedlist mark='bullet'>
	    <listitem><para>
	      <emphasis>Application Programs</emphasis> don't have to be
	      developed using the same programming language
	    </para></listitem>
	    <listitem><para>
	      <emphasis>Application Programs</emphasis> don't have to be
	      executed inside the same sort of <emphasis>application
	      container or server</emphasis>; example: one
	      <emphasis>Application Program</emphasis> can be executed inside
	      a shell script, another one can be executed under the supervision
	      of an HTTP server
	    </para></listitem>
	    <listitem><para>
	      <emphasis>Application Programs</emphasis> can use any sort of
	      communication channel to transfer the transaction identifier 
	      (XID): it can be a REST over HTTP, in can be a message queing
	      system, it can be a POSIX pipe and so on. Any communication
	      channel that can send an ASCII string is eligible for passing
	      the transaction identifier (XID)
	    </para></listitem>
	    <listitem><para>
	      <emphasis>Application Programs</emphasis> can be called using
	      consecutive calls or can run in concurrent branches
	    </para></listitem>
	  </itemizedlist>
	</para>
      </note>
    </section>
    <section>
      <title>XTA Technology Matrix</title>
      <para>
	XTA strongly depends from the type of XA support provided by the
	different Resource Managers and from the language bindings supplied
	with the Resource Managers' libraries. The following table is updated
	with the tested configurations:
	<footnote><para>
	  Sometimes software versions make the difference, but this table don't
	  cope with them and must not be intended like a compatibility and
	  support matrix.
	</para></footnote>
	<table xml:id="XTA_technology_matrix" frame="all">
	  <title>Resouce Managers and Programming Languages for XTA</title>
	  <tgroup cols="6" colsep="1" rowsep="1">
	    <thead>
	      <row>
		<entry>Resource Manager</entry>
		<entry>C</entry>
		<entry>C++<footnote>
		<para>Planned a C++ wrapper, not yet implemented
		</para></footnote></entry>
		<entry>Java<footnote>
		<para>Planned a JNI based wrapper with access to XA native
		Java classes, not yet implemented
		</para></footnote></entry>
		<entry>PHP<footnote>
		<para>Planned a SWIG wrapper, not yet implemented
		</para></footnote></entry>
		<entry>Python<footnote>
		<para>Planned a SWIG wrapper, not yet implemented
		</para></footnote></entry>
	      </row>
	    </thead>
	    <tbody align="center">
	      <row>
		<entry>MySQL, MariaDB</entry>
		<entry>Y<footnote>
		<para><quote>Multiple Applications, Consecutive Calls</quote>
		pattern is not
		available because MySQL/MariaDB don't support TMSUSPEND and
		TMRESUME standard XA flags
		</para></footnote></entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>-</entry>
	      </row>
	      <row>
		<entry>Oracle DBMS</entry>
		<entry>Y</entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>N<footnote>
		<para>No known way to re-use a standard OCI connection as an 
		XA OCI connection
		</para></footnote></entry>
		<entry>N<footnote>
		<para>No known way to re-use a standard OCI connection as an 
		XA OCI connection
		</para></footnote></entry>
	      </row>
	      <row>
		<entry>PostgreSQL</entry>
		<entry>Y<footnote>
		<para><quote>Multiple Applications, Consecutive Calls</quote>
		pattern is not
		available because MySQL/MariaDB don't support TMSUSPEND and
		TMRESUME standard XA flags
		</para></footnote></entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>-</entry>
		<entry>-</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
    </section>
    <section>
      <title>The XTA Programming Model</title>
      <para>
	XTA support 4 different patterns:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    <quote>Single Application</quote>:
	    single <emphasis>Application Program</emphasis> with single or 
	    multiple <emphasis>Resource Managers</emphasis> as supported by
	    the TX Transaction Demarcation Specification
	  </para></listitem>
	  <listitem><para>
	    <quote>Multiple Applications, Consecutive Calls</quote>:
	    multiple <emphasis>Application Programs</emphasis> with single or
	    multiple <emphasis>Resource Managers</emphasis>, only one
	    <emphasis>Application Program</emphasis> is working as part of a
	    transaction at a specified time, the XA global transaction is
	    composed by a single transaction branch
	  </para></listitem>
	  <listitem><para>
	    <quote>Multiple Applications, Concurrent Branches/Pseudo
	    Synchronous</quote>:
	    multiple <emphasis>Application Programs</emphasis> with single or
	    multiple <emphasis>Resource Managers</emphasis>, many 
	    <emphasis>Application Programs</emphasis> are concurrently working
	    as part of a transaction at a specified time, the XA global
	    transaction is composed by multiple transaction branches, the
	    type of interaction among the
	    <emphasis>Application Programs</emphasis> is
	    <quote>Pseudo Synchronous</quote>
	  </para></listitem>
	  <listitem><para>
	    <quote>Multiple Applications, Concurrent Branches/Pseudo
	    Asynchronous</quote>:
	    multiple <emphasis>Application Programs</emphasis> with single or
	    multiple <emphasis>Resource Managers</emphasis>, many 
	    <emphasis>Application Programs</emphasis> are concurrently working
	    as part of a transaction at a specified time, the XA global
	    transaction is composed by multiple transaction branches, the
	    type of interaction among the
	    <emphasis>Application Programs</emphasis> is
	    <quote>Pseudo Asynchronous</quote>
	  </para></listitem>
	</itemizedlist>
      </para>
    </section>
  </section>
  <section>
    <title>The<quote>Single Application</quote>Pattern</title>
    <table frame="box">
      <thead>
	<tr><td>The pattern in brief:</td></tr>
      </thead>
      <tbody>
	<tr>
	  <td>Architecture:</td>
	  <td>see <xref linkend="xta_arch02"/></td>
	</tr>
	<tr>
	  <td>Number of Application Programs:</td>
	  <td>exactly 1</td>
	</tr>
	<tr>
	  <td>Number of Resource Managers:</td>
	  <td>many, if 1 single phase commit will be used</td>
	</tr>
	<tr>
	  <td>Number of Branches in the Gloabal Transaction:</td>
	  <td>exactly 1</td>
	</tr>
	<tr>
	  <td>Concurrency among Application Programs:</td>
	  <td>not applicable</td>
	</tr>
      </tbody>
    </table>
    <section>
      <title>Description</title>
      <para>
	This is a traditional Distributed Transaction Processing pattern: a
	single Application Program uses two or more Resource Managers and
	performs a transaction that change the state of both. Here is a list
	of examples:
	<itemizedlist mark='bullet'>
	  <listitem><para>
	    RM1 and RM2 are two different databases, for example PostgreSQL and
	    MySQL (or MariaDB): the Application Program moves a record from
	    RM1 (PostgreSQL) to RM2 (MySQL)
	  </para></listitem>
	  <listitem><para>
	    RM1 and RM2 are a messaging system and a database, for example
	    IBM MQ and Oracle Databae Server: the Application Program get a
	    message from a queue, insert a row in a table, remove the message
	    from the queue
	  </para></listitem>
	  <listitem><para>
	    RM1 and RM2 are two different types of database and the 
	    Application Program inserts exactly the same data in both, maybe
	    using a different format
	  </para></listitem>
	</itemizedlist>
	The pattern can be implemented even using the standard TX Transaction
	Demarcation interface, but XTA is much more object oriented.
      </para>
    </section>
    <section>
      <title>How it works</title>
      <figure xml:id="xta_pattern01">
	<title>simplified sequence diagram for the <quote>Single Application
	Program</quote> Pattern</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="../images/LIXA_Development_XTA_04.png"/>
	  </imageobject>
	</mediaobject>
      </figure>
      <para>
	The above figure shows the logic necessary to build this type of
	application; it's <emphasis>not</emphasis> a formally correct UML
	sequence diagram (all the XTA objects are in the same lifeline), but
	it should be clear enough to understand the
	proper operations sequence:
      </para>
      <itemizedlist mark='bullet'>
	<listitem><para>
	  The Application Program (AP) creates the native
	  objects/connections/handles
	  <footnote><para>
	    Examples: <function>mysql_real_connect</function> for MySQL,
	    <function>PQconnectDB</function> for PostgreSQL.
	  </para></footnote>
	  that are necessary to operate with the Resource Managers
	  <footnote><para>
	    Some Resource Managers, like for example Oracle Database Server,
	    don't allow to be created as <quote>normal</quote> connections
	    and then transformed in <emphasis>XA connections</emphasis>:
	    they must be directly created by XTA.
	  </para></footnote>
	</para></listitem>
	<listitem><para>
	  The AP creates some XTA objects: a
	  <function>TransactionManager</function>,
	  two <function>XaResource</function>
	  and one <function>Transaction</function>
	</para></listitem>
	<listitem><para>
	  The AP <quote>enlists</quote> the XA resources that 
	  <emphasis>must be controlled by the transaction</emphasis>
	  using <function>EnlistResource()</function> method
	</para></listitem>
	<listitem><para>
	  The AP uses the <function>Open()</function> method
	  to initialized the <function>XaResource</function> objects
	</para></listitem>
	<listitem><para>
	  The AP uses the <function>Start()</function> method
	  to start a new XA distributed transaction
	</para></listitem>
	<listitem><para>
	  The AP interacts with the Resource Managers, using the native
	  objects/connections/handles to operate
	  (<quote>doSomething</quote> method in the diagram)
	</para></listitem>
	<listitem><para>
	  The AP uses the <function>Commit()</function> method to commit the
	  distributed transaction, or the <function>Rollback()</function>
	  method to rollback all the changes since
	  <function>Start()</function>
	</para></listitem>
	<listitem><para>
	  The AP cleans-up the environment
	</para></listitem>
      </itemizedlist>
      <note><para>
	The methods listed in the above description must be considered
	<quote>pseudo-code</quote>: the real name and signature is language
	dependent. As an example, 
	<screen>tm = new TransactionManager()</screen> translates to
	<screen>tm = xta_transaction_manager_new()</screen> and
	<screen>tx.Commit()</screen> translates to
	<screen>xta_transaction_commit(tx, FALSE)</screen> in C.
      </para></note>
    </section>
    <section>
      <title>Example</title>
      <para>
	The supplied example (<filename>example_xta_sa01.c</filename>) uses
	PostgreSQL in the role of <quote>Resource Manager 1</quote> and MySQL
	(or MariaDB) in the role of <quote>Resource Manager 2</quote>; please
	refer to the instructions explained 
	<itemizedlist mark="bullet">
	  <listitem><para>
	    in <xref linkend="App_RM_Config_MySQL"/>
	    to set-up a running environment for MySQL server
	  </para></listitem>
	  <listitem><para>
	    in <xref linkend="App_RM_Config_PostgreSQL"/>
	    to set-up a running environment for PostgreSQL server
	  </para></listitem>
	  <listitem><para>
	    in <xref linkend="Starting_the_state_server"/>
	    to start up the LIXA state server
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	Create a working directory in a place you are comfortable with:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~$ cd
tiian@ubuntu1404-64:~$ mkdir tmp
tiian@ubuntu1404-64:~$ cd tmp
tiian@ubuntu1404-64:~/tmp$ 
	  </screen></td></tr></tbody>
	</table>
      </para>
      <para>
	Copy file <filename>example_xta_sa01.c</filename> in your working dir:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
	    tiian@ubuntu:~/tmp$ cp /opt/lixa/share/doc/lixa-X.Y.Z/examples/xta/example_xta_sa01.c .
	  </screen></td></tr></tbody>
	</table>
	Substitute <quote>lixa-X.Y.Z</quote> with the actual version of
	the software you installed.
      </para>
      <para>
	Compile and link the C example program:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ . /opt/lixa/bin/lixa_env.sh 
tiian@ubuntu1404-64:~/tmp$ gcc example_xta_sa01.c $(lixa-config -x -c -f -l -d) -lpq $(mysql_config --libs_r) -o example_xta_sa01
	  </screen></td></tr></tbody>
	</table>
      </para>
      <para>
	If the previous steps worked for you, you would have an executable file
	of name <filename>example_xta_sa01</filename> in your current 
	directory:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:/tmp$ ls -l
total 32
-rwxrwxr-x 1 tiian tiian 18603 mar 20 22:56 example_xta_sa01
-rw-r--r-- 1 tiian tiian  8302 mar 20 22:50 example_xta_sa01.c
	  </screen></td></tr></tbody>
	</table>
	The example program accepts two arguments:
	<itemizedlist mark="bullet">
          <listitem><para>
	    commit (or rollback): use <quote>1</quote> if you want to perform
	    a global commit or <quote>0</quote> if you want to perform a global
	    rollback
	  </para></listitem>
          <listitem><para>
	    insert (or delete): use <quote>1</quote> if you want to insert rows
	    in databases or <quote>0</quote> if you want to delete rows from
	    databases
	  </para></listitem>
	</itemizedlist>
      </para>
      <para>
	Open three terminal sessions: one for example execution,
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - example]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ls -la
total 40
drwxrwxr-x  2 tiian tiian  4096 mar 20 23:13 .
drwxr-xr-x 12 tiian tiian  4096 mar 21 22:17 ..
-rwxrwxr-x  1 tiian tiian 18603 mar 20 23:13 example_xta_sa01
-rw-r--r--  1 tiian tiian  8302 mar 20 23:08 example_xta_sa01.c
	  </screen></td></tr></tbody>
	</table>
	one for PostgreSQL queries
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - PostgreSQL]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~$ psql testdb
psql (9.3.22)
Type "help" for help.

testdb=>
	  </screen></td></tr></tbody>
	</table>
	and one for MySQL queries
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - MySQL]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~$ mysql -h localhost -u lixa lixa
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 36
Server version: 5.5.59-0ubuntu0.14.04.1 (Ubuntu)

Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql>
	  </screen></td></tr></tbody>
	</table>
	insert rows in tables and commit:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - example]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_sa01 1 1
PostgreSQL, executing &gt;INSERT INTO authors VALUES(1921, 'Rigoni Stern', 'Mario')&lt;
MySQL, executing &gt;INSERT INTO authors VALUES(1919, 'Levi', 'Primo')&lt;
tiian@ubuntu1404-64:~/tmp$
	  </screen></td></tr></tbody>
	</table>
	check PostgreSQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - PostgreSQL]</td></tr></thead>
	  <tbody><tr><td><screen>
testdb=&gt; select * from authors;
  id  |  last_name   | first_name 
------+--------------+------------
 1921 | Rigoni Stern | Mario
(1 row)

testdb=&gt;
	  </screen></td></tr></tbody>
	</table>
	check MySQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - MySQL]</td></tr></thead>
	  <tbody><tr><td><screen>
mysql> select * from authors;
+------+-----------+------------+
| id   | last_name | first_name |
+------+-----------+------------+
| 1919 | Levi      | Primo      |
+------+-----------+------------+
1 row in set (0.00 sec)

mysql>
	  </screen></td></tr></tbody>
	</table>
	delete rows from tables, but rollback:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - example]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_sa01 0 0
PostgreSQL, executing &gt;DELETE FROM authors WHERE id=1921&lt;
MySQL, executing &gt;DELETE FROM authors WHERE id=1919&lt;
tiian@ubuntu1404-64:~/tmp$
	  </screen></td></tr></tbody>
	</table>
	check PostgreSQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - PostgreSQL]</td></tr></thead>
	  <tbody><tr><td><screen>
testdb=&gt; select * from authors;
  id  |  last_name   | first_name 
------+--------------+------------
 1921 | Rigoni Stern | Mario
(1 row)

testdb=&gt;
	  </screen></td></tr></tbody>
	</table>
	check MySQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - MySQL]</td></tr></thead>
	  <tbody><tr><td><screen>
mysql> select * from authors;
+------+-----------+------------+
| id   | last_name | first_name |
+------+-----------+------------+
| 1919 | Levi      | Primo      |
+------+-----------+------------+
1 row in set (0.00 sec)

mysql>
	  </screen></td></tr></tbody>
	</table>
	delete rows and commit:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - example]</td></tr></thead>
	  <tbody><tr><td><screen>
tiian@ubuntu1404-64:~/tmp$ ./example_xta_sa01 1 0
PostgreSQL, executing &gt;DELETE FROM authors WHERE id=1921&lt;
MySQL, executing &gt;DELETE FROM authors WHERE id=1919&lt;
tiian@ubuntu1404-64:~/tmp$
	  </screen></td></tr></tbody>
	</table>
	check PostgreSQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - PostgreSQL]</td></tr></thead>
	  <tbody><tr><td><screen>
testdb=> select * from authors;
 id | last_name | first_name 
----+-----------+------------
(0 rows)

testdb=>
	  </screen></td></tr></tbody>
	</table>
	check MySQL table content:
	<table frame="box">
	  <thead><tr><td>[Shell terminal session - MySQL]</td></tr></thead>
	  <tbody><tr><td><screen>
mysql> select * from authors;
Empty set (0.00 sec)

mysql>
	  </screen></td></tr></tbody>
	</table>
      </para>
    </section>
    <section>
      <title>Source Code</title>
      <para>
	Source code for program <filename>example_xta_sa01.c</filename> is
	installed in directory
	<filename>/opt/lixa/share/doc/lixa-X.Y.Z/examples/xta</filename> and
	is available on <link xlink:href="https://github.com/tiian/lixa/blob/master/doc/examples/xta/example_xta_sa01.c">GitHub</link>. Source code is fully
	commented for readability.
      </para>
    </section>
  </section>
  <section>
    <title>The
    <quote>Multiple Applications, Consecutive Calls</quote>
    Pattern</title>
    <table frame="box">
      <thead>
	<tr><td>The pattern in brief:</td></tr>
      </thead>
      <tbody>
	<tr>
	  <td>Architecture:</td>
	  <td>see <xref linkend="xta_arch03"/></td>
	</tr>
	<tr>
	  <td>Number of Application Programs:</td>
	  <td>2 or more</td>
	</tr>
	<tr>
	  <td>Number of Resource Managers:</td>
	  <td>1 or more for every Application Program</td>
	</tr>
	<tr>
	  <td>Number of Branches in the Gloabal Transaction:</td>
	  <td>1 for every Application Program</td>
	</tr>
	<tr>
	  <td>Concurrency among Application Programs:</td>
	  <td>no, strictly consecutive executive</td>
	</tr>
      </tbody>
    </table>
  </section>
  <section>
    <title>The
    <quote>Multiple Applications, Concurrent Branches/Pseudo Synchronous</quote>
    Pattern</title>
    <table frame="box">
      <thead>
	<tr><td>The pattern in brief:</td></tr>
      </thead>
      <tbody>
	<tr>
	  <td>Architecture:</td>
	  <td>see <xref linkend="xta_arch03"/></td>
	</tr>
	<tr>
	  <td>Number of Application Programs:</td>
	  <td>2 or more</td>
	</tr>
	<tr>
	  <td>Number of Resource Managers:</td>
	  <td>1 or more for every Application Program</td>
	</tr>
	<tr>
	  <td>Number of Branches in the Gloabal Transaction:</td>
	  <td>1 for every Application Program</td>
	</tr>
	<tr>
	  <td>Concurrency among Application Programs:</td>
	  <td>yes, subordinate AP prepares the transaction, returns control to superior AP and finally completes commit</td>
	</tr>
      </tbody>
    </table>
  </section>
  <section>
    <title>The
    <quote>Multiple Applications, Concurrent Branches/Pseudo Asynchronous</quote>
    Pattern</title>
    <table frame="box">
      <thead>
	<tr><td>The pattern in brief:</td></tr>
      </thead>
      <tbody>
	<tr>
	  <td>Architecture:</td>
	  <td>see <xref linkend="xta_arch03"/></td>
	</tr>
	<tr>
	  <td>Number of Application Programs:</td>
	  <td>2 or more</td>
	</tr>
	<tr>
	  <td>Number of Resource Managers:</td>
	  <td>1 or more for every Application Program</td>
	</tr>
	<tr>
	  <td>Number of Branches in the Gloabal Transaction:</td>
	  <td>1 for every Application Program</td>
	</tr>
	<tr>
	  <td>Concurrency among Application Programs:</td>
	  <td>yes, subordinate AP creates a new branch and then executes asynchronously</td>
	</tr>
      </tbody>
    </table>
  </section>
</chapter>
