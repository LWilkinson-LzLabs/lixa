<chapter xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Introduction</title>
  <section>
    <title>Why should I use LIXA project?</title>
    <para>
      LIXA project allows you to develop Application Programs that perform
      <emphasis>two phase commit transactions</emphasis> using multiple
      Resource Managers.
      Two phase commit is a transactional protocol designed to 
      guarantee <acronym>ACID</acronym> (Atomicity, Consistency,
      Isolation, Durability) transactionality.
    </para>
    <para>
      LIXA supports different programming APIs and different programming
      models:
      <itemizedlist mark='bullet'>
	<listitem><para>XTA, XA Transaction API, an original API implemented
	by LIXA to provide two phase commit transactions for micro services
	and/or serverless oriented applications</para></listitem>
	<listitem><para>TX, a standard developed by X/Open in 1995</para>
	</listitem>
      </itemizedlist>      
    </para>
  </section>
  <warning>
    <para>
      <emphasis>It applies to XA/TX programming model only.</emphasis>
    </para>
    <para>
      The reference model (<citation>RefModel</citation>) technical guide
      available on the <trademark>Open Group</trademark> web site is more
      recent than the XA specification (<citation>XAspec</citation>); 
      after XA, the X/Open Company developed the XA+ specification and the 
      reference model was improved with the concepts necessary for XA+. 
      LIXA project does <emphasis>not</emphasis> implement
      the XA+ specification, but only XA and the following concepts explained 
      in <citation>RefModel</citation> do not apply to the LIXA project:
      <itemizedlist mark='bullet'>
	<listitem><para>3.1: Superior Node</para></listitem>
	<listitem><para>3.1: Subordinate Node</para></listitem>
	<listitem><para>3.1: Communication Resource Manager (<acronym>CRM</acronym>)</para></listitem>
	<listitem><para>3.5: Distributed Communication Facilities</para></listitem>
	<listitem><para>3.6: Activity between Functional Components Involving Two or More APs</para></listitem>
	<listitem><para>3.7: CRM Communication Paradigms with APs</para></listitem>
	<listitem><para>3.8: High-level TP Language</para></listitem>
      </itemizedlist>
      XA specification was designed to implement the two phase commit protocol
      in the case there is only one Application Program running inside a
      Transaction Monitor and using a Transaction Manager to coordinate any
      number of Resource Managers. XA+ specification was designed to
      implement the two phase commit protocol in the case there are two or
      more Application Programs running inside distinct Transaction Monitors
      and using distinct Transaction Managers to coordinate any number of
      Resource Managers.
    </para>
  </warning>
  <note>
    The above warning does not applies to XTA programming model, because it
    provides an alternative implementation of the following concepts:
      <itemizedlist mark='bullet'>
	<listitem><para>Superior Node</para></listitem>
	<listitem><para>Subordinate Node</para></listitem>
	<listitem><para>Activity between Functional Components Involving Two or More APs</para></listitem>
      </itemizedlist>
      by mean of XTA (XA Transactional API)
      <footnote><para>
	See <xref linkend="Development_XTA"/> for more information on XTA.
      </para></footnote>. 
  </note>
  <section xml:id="Supported_Programming_Models">
    <title>Supported Programming Models</title>
    <para>
      Since its inception, LIXA has supported the TX Transaction Demarcation
      Specification published by X/Open as the standard programming model. TX
      is a quite old standard published in 1995 and it's based on some
      architecture choices that are no more actual.
    </para>
    <para>
      For modern applications, the LIXA project provides XTA (XA Transactional
      API)
      <footnote><para>
	See <xref linkend="Development_XTA"/> for more information on XTA.
      </para></footnote>:
      it's a new interface designed to support distributed transactions
      among distributed Application Programs developed in possibly different
      programming languages and without direct coupling among TP Monitors or
      Application Servers.
    </para>
  </section>
  <section xml:id="Transaction_Manager_and_Transaction_Monitor">
    <title>Transaction Manager and Transaction Monitor</title>
    <para>
      As explained in Appendix A of <citation>RefModel</citation> a 
      Transaction Manager can be though as a subset of a Transaction Monitor.
      Most commercial products tend to merge the features
      in a single bundle; this is good if you need a Transaction Monitor,
      this may be bad if you only need a Transaction Manager.
    </para>
    <para>
      IBM TXSeries<footnote><para>TXSeries is a registered trademark of 
	  IBM corporation</para></footnote> is a Transaction Monitor with an
      integrated Transaction Manager.
      Oracle (BEA) Tuxedo<footnote><para>Tuxedo is a registered trademark of
	  Oracle corporation</para></footnote> is a Transaction Monitor with an
      integrated Transaction Manager.
      JBoss<footnote><para>JBoss is a registered trademark of Red Hat
	  corporation</para></footnote> is a <acronym>JEE</acronym>
      (Java Enterprise Edition) application server; it is a Transaction
      Monitor with an integrated Transaction Manager for Java based
      applications.
    </para>
    <para>
      <link xlink:href="http://jotm.ow2.org/xwiki/bin/view/Main/WebHome">
	<citetitle>JOTM (Java Open Transaction Manager)</citetitle>
      </link>
      and
      <link xlink:href="https://github.com/bitronix/btm">
	<citetitle>BTM (Bitronix JTA Transaction Manager)</citetitle>
      </link> 
      are Transaction Managers, but they are not Transaction Monitors and they
      can be used in conjunction with a
      <acronym>JVM</acronym> (Java Virtual Machine) and 
      <emphasis>possibly</emphasis> any
      Transaction Monitor. Unfortunately they are Java based technologies and 
      not native ones; in the Java arena there are a few stand-alone 
      Transaction
      Manager, while in the C language arena it is not easy to find out one.
    </para>
    <section>
      <title>LIXA behavior when XTA is used to develop applications</title>
      <para>
	The LIXA project implements a distributed Transaction Manager that your
	Application Programs can use to coordinate a distributed transaction
	among two or more Application Programs in execution on different
	systems. See <xref linkend="Development_XTA"/> for more information
	about XTA.
      </para>
    </section>
    <section>
      <title>LIXA behavior when the TX Transaction Demarcation Specification
      is used to develop applications</title>
      <para>
	The LIXA project implements a stand-alone Transaction Manager that your
	Application Program can use in many different ways:
	<itemizedlist mark='bullet'>
	  <listitem><para>from a C application launched from shell or via CGI
	  inside a web server</para></listitem>
	  <listitem><para>from a COBOL application launched from shell</para></listitem>
	  <listitem>
	    <para>from a scripting language application<footnote>
	    <para>You must wrap the TX C API to be able to use it from Perl,
	    PHP, Python, Ruby...</para></footnote>.</para>
	  </listitem>
	</itemizedlist>
	With the aid of the LIXA Transaction Manager potentially any web server
	can be converted in an Application Server with two phase commit
	support.
      </para>
    </section>
  </section>
  <section>
    <title>LIXA Architecture</title>
    <para>
      From an architectural point of view, the LIXA project adopts an original
      approach: an Application Program links the LIXA client library and
      embeds the Transaction Manager logic. Every Application Program instance
      runs its own Transaction Manager instance and every Transaction
      Manager instance uses the LIXA server daemon to save and retrieve the
      state of the managed transactions.
      LIXA project was designed to allow massive parallelism and embedding at
      the same time: the parallelism is necessary to support high volume
      workloads while the embeddable property is necessary to avoid conflicts
      with the process and thread management feature of any Transaction 
      Monitors.
    </para>
    <para>
      LIXA architecture when used in conjunction with XTA is explained in
      <xref linkend="Development_XTA"/>.      
    </para>
    <para>
      Generic LIXA architecture is explained in
      <xref linkend="Configuration"/>
    </para>
  </section>
  <section>
    <title>LIXA and X/OPEN CAE specifications</title> 
    <para>
      The LIXA project tries to be as compliant as possible with the X/Open CAE
      specifications cited in bibliography. Below there are the features that
      are <emphasis>not</emphasis> implemented and the features that are
      <emphasis>not</emphasis> implementable.
    </para>
    <simplesect>
      <title>The commit_return Characteristic</title>
      <para>
	As explained in <citation>TXspec</citation> (3.4, 3.8.1) two values
	are available:
	<itemizedlist mark='bullet'>
	  <listitem><para><constant>TX_COMMIT_COMPLETED
	    </constant></para></listitem>
	  <listitem><para><constant>TX_COMMIT_DECISION_LOGGED
	    </constant></para></listitem>
	</itemizedlist>
	LIXA TX API implementation supports only
	<constant>TX_COMMIT_COMPLETED</constant>
	this behavior is allowed by the specification.
      </para>
    </simplesect>
    <simplesect>
      <title>The transaction state element</title>
      <para>
	As explained in <citation>TXspec</citation> (4.2, page 16)
	<function>tx_info()</function> can return three values:
	<itemizedlist mark='bullet'>
	  <listitem><para><constant>TX_ACTIVE
	    </constant></para></listitem>
	  <listitem><para><constant>TX_TIMEOUT_ROLLBACK_ONLY
	    </constant></para></listitem>
	  <listitem><para><constant>TX_ROLLBACK_ONLY
	    </constant></para></listitem>
	</itemizedlist>
      </para>
      LIXA <function>tx_info()</function> does not return
      <constant>TX_ROLLBACK_ONLY</constant>. This does not hurt the
      X/Open CAE specification.
    </simplesect>
    <simplesect>
      <title>XA -> TX return code mappings</title>
      <para>
	In <citation>TXspec</citation> (Appendix B.4, page 64) it is suggested
	to return the value <constant>TX_ERROR</constant> when the Resource
	Manager returns <constant>XA_RETRY</constant>; this is explained in
	<quote>note 1</quote>. 
      </para>
      <para>
	The LIXA implementation of 
	for <function>tx_commit()</function> and
	<function>tx_rollback()</function> returns 
	<constant>TX_NO_BEGIN</constant> instead of 
	<constant>TX_ERROR</constant> because it seems a more useful 
	information for the Application Program: the transaction has been
	successfully committed/rolled back, but a new transaction can not be
	started
	<footnote><para>The X/Open CAE specification document
	    <quote>suggests</quote> the mapping and it seems there is some
	    flexibility in the suggestions. From a LIXA perspective all this
	    stuff is academic because <constant>TMNOWAIT</constant> is not
	    used by LIXA implementation.</para></footnote>.
      </para>
    </simplesect>
    <simplesect>
      <title><function>xa_rollback()</function> and 
	<constant>XA_RETRY</constant> return code</title>
      <para>
	In <citation>TXspec</citation> (Appendix B.5, page 69) it is 
	explained <constant>XA_RETRY</constant> is a valid return code for
	function <function>xa_rollback()</function>. Unfortunately
	<citation>XAspec</citation> does not agree with this point of view: the
	<constant>XA_RETRY</constant> is not a valid return code for 
	function <function>xa_rollback()</function>. It may be an error in
	<citation>TXspec</citation>: the same row could have been copied from 
	the previous table (page 68).
      </para>
      <para>
	<citation>XA+spec</citation> does not list 
	<constant>XA_RETRY</constant> as a valid return code for 
	function <function>xa_rollback()</function>; it lists
	<constant>XA_RETRY_COMMFAIL</constant> but it does not apply to LIXA
	implementation because it is related to the 
	<emphasis>Communication Resource Manager</emphasis> concept that is
	not supported by LIXA implementation.
      </para>
      <para>
	The LIXA implementation sticks to <citation>XAspec</citation>: if a
	resource manager returned <constant>XA_RETRY</constant> it would be
	considered a bug inside the resource manager.
      </para>
    </simplesect>
  </section>
</chapter>
