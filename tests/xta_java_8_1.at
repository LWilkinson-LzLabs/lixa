# These test cases are not designed to check all the possible server side
# crashed - that's already addressed by ct_ test cases - but how the XTA client
# library reacts to server crashes
AT_BANNER([XTA for Java: Multiple Applications, Consecutive Calls, state server crash])

AT_SETUP([XTA Java/8.1/1.0 server_xa_start_8])
AT_CHECK([if test "$LIXA_XTA_JAVA" != "yes"; then exit 77; fi])
AT_CHECK([if test "$HAVE_ORACLE" = "no"; then exit 77; fi])
# start the LIXA state server
AT_CHECK([export LIXA_CRASH_POINT=28; export LIXA_CRASH_COUNT=2; lixa_test_exec.sh noreset start true], [0], [ignore], [ignore])
# start the XTA Application Program and suspend the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 0 1 1 0 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
# start the XTA Application Program and resume the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 2 0 1 0 0 $TESTS_TMP_FILE1 2>&1], [2], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([XTA Java/8.1/1.1 server_xa_start_24])
AT_CHECK([if test "$LIXA_XTA_JAVA" != "yes"; then exit 77; fi])
AT_CHECK([if test "$HAVE_ORACLE" = "no"; then exit 77; fi])
# start the LIXA state server
AT_CHECK([export LIXA_CRASH_POINT=29; export LIXA_CRASH_COUNT=2; lixa_test_exec.sh noreset start true], [0], [ignore], [ignore])
# start the XTA Application Program and suspend the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 0 1 1 1 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
# start the XTA Application Program and resume the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
xa_prepare/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 2 0 1 1 0 $TESTS_TMP_FILE1 2>&1], [3], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([XTA Java/8.1/2.0 server_xa_end_8])
AT_CHECK([if test "$LIXA_XTA_JAVA" != "yes"; then exit 77; fi])
AT_CHECK([if test "$HAVE_ORACLE" = "no"; then exit 77; fi])
# start the LIXA state server
AT_CHECK([export LIXA_CRASH_POINT=30; export LIXA_CRASH_COUNT=2; lixa_test_exec.sh noreset start true], [0], [ignore], [ignore])
# start the XTA Application Program and suspend the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 0 1 1 2 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
# start the XTA Application Program and resume the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
xa_prepare/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 2 0 1 2 0 $TESTS_TMP_FILE1 2>&1], [3], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([XTA Java/8.1/3.0 server_xa_prepare_8])
AT_CHECK([if test "$LIXA_XTA_JAVA" != "yes"; then exit 77; fi])
AT_CHECK([if test "$HAVE_ORACLE" = "no"; then exit 77; fi])
# start the LIXA state server
AT_CHECK([export LIXA_CRASH_POINT=32; export LIXA_SYNC_NODELAY=yes; lixa_test_exec.sh noreset start true], [0], [ignore], [ignore])
# start the XTA Application Program and suspend the transaction
# recover previous prepared transaction: TRADITIONAL state engine misses the
# end state and requires nothing; JOURNAL state engine saves
# it and requires a safe rollback
if test "$LIXA_STATE_ENGINE" = "JOURNAL" -o "$LIXA_STATE_ENGINE" = "MIGRATE"
then
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
# recovery rollback
xa_rollback/0
xa_start/0
xa_end/0
]])
else
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
]])
fi
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 0 1 1 0 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
# start the XTA Application Program and resume the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
xa_prepare/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 2 0 1 0 0 $TESTS_TMP_FILE1 2>&1], [3], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([XTA Java/8.1/3.1 automatic recovery])
AT_CHECK([if test "$LIXA_XTA_JAVA" != "yes"; then exit 77; fi])
AT_CHECK([if test "$HAVE_ORACLE" = "no"; then exit 77; fi])
# start the LIXA state server
AT_CHECK([lixa_test_exec.sh noreset start true], [0], [ignore], [ignore])
# start the XTA Application Program and suspend the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
# recovery rollback
xa_rollback/0
xa_start/0
xa_end/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 0 1 1 1 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
# start the XTA Application Program and resume the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
xa_prepare/0
xa_commit/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset stop case4102 2 0 1 1 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([XTA Java/8.1/4.0 server_xa_commit_8])
AT_CHECK([if test "$LIXA_XTA_JAVA" != "yes"; then exit 77; fi])
AT_CHECK([if test "$HAVE_ORACLE" = "no"; then exit 77; fi])
# start the LIXA state server
AT_CHECK([export LIXA_CRASH_POINT=33; export LIXA_SYNC_NODELAY=yes; lixa_test_exec.sh noreset start true], [0], [ignore], [ignore])
# start the XTA Application Program and suspend the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 0 1 1 2 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
# start the XTA Application Program and resume the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
xa_prepare/0
xa_commit/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 2 0 1 2 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([XTA Java/8.1/4.1 automatic recovery])
AT_CHECK([if test "$LIXA_XTA_JAVA" != "yes"; then exit 77; fi])
AT_CHECK([if test "$HAVE_ORACLE" = "no"; then exit 77; fi])
# start the LIXA state server
AT_CHECK([lixa_test_exec.sh noreset start true], [0], [ignore], [ignore])
# start the XTA Application Program and suspend the transaction
# recover previous prepared transaction: TRADITIONAL state engine misses the
# committed back state and requires a further commit; JOURNAL state engine saves
# it and requires nothing
if test "$LIXA_STATE_ENGINE" = "JOURNAL" -o "$LIXA_STATE_ENGINE" = "MIGRATE"
then
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
]])
else
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
# recovery commit
xa_commit/0
xa_start/0
xa_end/0
]])
fi
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 0 1 1 0 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
# start the XTA Application Program and resume the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
xa_prepare/0
xa_commit/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset stop case4102 2 0 1 0 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([XTA Java/8.1/5.0 server_xa_rollback_8])
AT_CHECK([if test "$LIXA_XTA_JAVA" != "yes"; then exit 77; fi])
AT_CHECK([if test "$HAVE_ORACLE" = "no"; then exit 77; fi])
# start the LIXA state server
AT_CHECK([export LIXA_CRASH_POINT=35; export LIXA_SYNC_NODELAY=yes; lixa_test_exec.sh noreset start true], [0], [ignore], [ignore])
# start the XTA Application Program and suspend the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 0 1 0 1 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
# start the XTA Application Program and resume the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
xa_rollback/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 2 1 0 2 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
AT_CLEANUP

AT_SETUP([XTA Java/8.1/5.1 automatic recovery])
AT_CHECK([if test "$LIXA_XTA_JAVA" != "yes"; then exit 77; fi])
AT_CHECK([if test "$HAVE_ORACLE" = "no"; then exit 77; fi])
# start the LIXA state server
AT_CHECK([lixa_test_exec.sh noreset start true], [0], [ignore], [ignore])
# start the XTA Application Program and suspend the transaction
# recover previous prepared transaction: TRADITIONAL state engine misses the
# rolled back state and requires a further rollback; JOURNAL state engine saves
# it and requires nothing
if test "$LIXA_STATE_ENGINE" = "JOURNAL" -o "$LIXA_STATE_ENGINE" = "MIGRATE"
then
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
]])
else
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
# recovery rollback
xa_rollback/0
xa_start/0
xa_end/0
]])
fi
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset none case4102 0 1 1 0 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
# start the XTA Application Program and resume the transaction
AT_DATA([monkey1s.conf],
[[# monkey R.M. config
xa_start/0
xa_end/0
xa_prepare/0
xa_commit/0
]])
AT_CHECK([export LIXA_PROFILE=CASE_PROF_0027 ; lixa_test_exec.sh noreset stop case4102 2 0 1 0 0 $TESTS_TMP_FILE1 2>&1], [0], [ignore], [ignore])
AT_CLEANUP

